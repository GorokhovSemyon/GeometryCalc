from abc import ABC, abstractmethod  # Импорт абстрактного базового класса и декоратора abstractmethod
import math


# Абстрактный базовый класс Shape (фигура)
# Данный класс служит абстракцией, которая определяет
# общий интерфейс для всех фигур, а именно абстрактный
# метод 'area', который обязательно должен быть реализован
# в каждом подклассе
class Shape(ABC):
    def __init__(self, *args):
        pass

    @abstractmethod
    def area(self):
        pass


# Каждый класс инкапсулирует свои данные и методы.  Таким образом, данные
# и функциональность связанны с фигурой, а не выносятся в глобальное пространство имен.

# Класс Circle (круг) наследует от абстрактного класса Shape
# Это позволяет наследовать общую структуру и функциональность Shape
class Circle(Shape):
    def __init__(self, *args):
        # Конструктор класса Circle, принимающий радиус
        if len(args) != 1:
            raise TypeError("Circle() принимает только один аргумент - радиус")
        if args[0] < 0:
            raise ValueError("Радиус должен быть положительным числом и не равен 0")
        # При радиусе, равном нулю, круг вырождается в точку
        self.radius = args[0]

    def area(self):
        # Метод для вычисления площади круга, используя формулу S = π * r^2
        return math.pi * self.radius ** 2


# Класс Triangle (треугольник) также наследует от абстрактного класса Shape
# Это позволяет наследовать общую структуру и функциональность Shape
class Triangle(Shape):
    def __init__(self, *args):
        # Конструктор класса Triangle, принимающий длины сторон
        if len(args) != 3:
            raise TypeError("Triangle() принимает только три аргумента - длины сторон")
        side1, side2, side3 = sorted(args)  # Сортируем стороны по возрастанию
        self.sides = [side1, side2, side3]
        if any(side < 0 for side in [side1, side2, side3]) or not self.is_valid_triangle():
            # Проверяем, что все стороны положительные и что треугольник существует
            raise ValueError("Недопустимые значения сторон треугольника")

    def area(self):
        # Метод для вычисления площади треугольника по формуле Герона
        s = sum(self.sides) / 2
        return math.sqrt(s * (s - self.sides[0]) * (s - self.sides[1]) * (s - self.sides[2]))

    def is_valid_triangle(self):
        # Метод для проверки, является ли треугольник допустимым
        a, b, c = self.sides
        # Проверка, что сумма двух любых сторон больше третьей (условие существования треугольника)
        return a + b > c and a + c > b and b + c > a

    def is_right_triangle(self):
        # Метод для проверки, является ли треугольник прямоугольным (теорема Пифагора)
        a, b, c = self.sides
        # Данные условия через логическое "ИЛИ" стоят только для перестраховки
        # на тот случай, если поменяют местами поля внутри объекта как-либо
        return (a ** 2 + b ** 2 == c ** 2
                or a ** 2 + c ** 2 == b ** 2
                or b ** 2 + c ** 2 == a ** 2)

# В данной реализации используются следующие принципы ООП:

#   Принцип единственной ответственности: Каждый класс имеет единственную ответственность -
#   вычисление площади своей фигуры. Это соблюдение принципа SOLID, который говорит о том,
#   что класс должен иметь только одну причину для изменения.

#   Принцип открытости/закрытости: Код легко расширяем, так как для добавления новых
#   фигур необходимо просто создать новый подкласс Shape и реализовать метод area.
#   Существующий код в классе Shape остается закрытым для изменений.
